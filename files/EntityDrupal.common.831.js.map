{"version":3,"file":"EntityDrupal.common.831.js","mappings":";;;;;;;;;;;;;;;AAAA,0BAA0B,aAAa,0BAA0B,wBAAwB,gCAAgC,OAAO,iBAAiB,KAAK,+BAA+B;AACrL;;;;;;;;;;;;;;;;;;;;;;;;;;ACQ4C;AAC5C,kFAAe;AACfA,+BADA;AAEAC,MAFA,kBAEA;AACA;AACAC;AACAC,eADA;AAEAC;AACAJ,iBACA;AACAK;AADA,WADA,CADA;AAMAC,gCACA;AACAC;AADA,WADA,CANA;AAWAC,gCACA;AACAD;AADA,WADA,CAXA;AAgBAE,6BACA;AACAJ;AADA,WADA;AAhBA;AAFA;AADA;AA2BA,GA9BA;AAgCAK,YAAYA,gCAAAA,CAAAA,gCAAAA,KACZC,6BAAAA,qBADA,GAEAC,+BAAAA,qBAFA,CAhCA;AAoCAC,SApCA,qBAoCA,CACA;AACA,GAtCA;AAuCAC;AACAC,qBADA,+BACA;AAAA;;AACA;AACA;AACA,OAFA;AAGA,KALA;AAMAC,uBANA,+BAMAC,KANA,EAMA;AAAA;;AACA;AAAA;AACA;AACA;AACA;;AACA;AACA;AACAC,8BACAC,iBADA,EAEAC,OAFA,EAGAD,eAHA,EAIAC,IAJA,EAKA,CALA,EAMAC,IANA,CAMA;AACA,8BACAC,QADA,CACA,YADA,EACA;AACAC,sDADA;AAEAlB,+BAFA;AAGAmB;AAHA,iBADA,EAMAH,IANA,CAMA;AACAF;AACAM;;AACA;AACAC;AACA,mBAFA,MAEAA;AACA,iBAZA,EAaAC,KAbA,CAaA;AACAC;AACA,iBAfA;AAgBA,eAvBA;AAwBA,aA1BA,MA0BA;AACA,4BACAN,QADA,CACA,YADA,EACA;AACAC,gDADA;AAEAlB,kCAFA;AAGAmB;AAHA,eADA,EAMAH,IANA,CAMA;AACAQ;AAAAtB;AAAAiB;AAAA;AACAC;;AACA;AACAC;AACA,iBAFA,MAEA;AACAA;AACA;AACA,eAdA,EAeAC,KAfA,CAeA;AACAC;AACA,eAjBA;AAkBA;AACA,WAhDA,MAgDAF;AACA,SAlDA;AAmDA,OApDA,CADA,CAsDA;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACAI;AACAC,uCADA,CAEA;;AACAN;;AACA;AACAC;AACA,eAFA,MAEA;AACAA;AACA;AACA,aATA;AAUA,WAZA,MAYAA;AACA,SAhBA;AAiBA,OAlBA,CA7DA,CAgFA;;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACAR,8BACAc,iBADA,EAEAZ,OAFA,EAGAY,eAHA,EAIAZ,IAJA,EAKA,CALA,EAMAC,IANA,CAMA;AACA,8BACAC,QADA,CACA,YADA,EACA;AACAC,sDADA;AAEAlB,+BAFA;AAGAmB;AAHA,iBADA,EAMAH,IANA,CAMA;AACAW;AACAP;;AACA;AACAC;AACA,mBAFA,MAEAA;AACA,iBAZA,EAaAC,KAbA,CAaA;AACAC;AACA,iBAfA;AAgBA,eAvBA;AAwBA,aA1BA,CA2BA;AA3BA,iBA4BA;AACA,4BACAN,QADA,CACA,YADA,EACA;AACAC,oDADA;AAEAlB,sCAFA;AAGAmB;AAHA,eADA,EAMAH,IANA,CAMA;AACAW;AACAP;;AACA;AACAC;AACA,iBAFA,MAEAA;AACA,eAZA,EAaAC,KAbA,CAaA;AACAC;AACA,eAfA;AAgBA;AACA,WAhDA,MAgDA;AACAF;AACA;AACA,SApDA;AAqDA,OAtDA;;AAuDAO;AACA;AA/IA;AAvCA;;ACVgR,CAAC,wFAAe,6CAAG,EAAC;;;;ACAhM;AAC3B;AACL;;;AAGpE;AACA,CAAmG;AACnG,gBAAgB,sCAAU;AAC1B,EAAE,mDAAM;AACR,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAAe","sources":["webpack://entity-drupal/./src/views/TextDuplicateEntities.vue?0199","webpack://entity-drupal/src/views/TextDuplicateEntities.vue","webpack://entity-drupal/./src/views/TextDuplicateEntities.vue?9bba","webpack://entity-drupal/./src/views/TextDuplicateEntities.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('b-button',{attrs:{\"variant\":\"info\"},on:{\"click\":_vm.duplicateEntities}},[_vm._v(\" duplicate entities \")]),_c('div',[_vm._v(\"numbersEntities: \"+_vm._s(_vm.numbersEntities))])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div>\n    <b-button variant=\"info\" @click=\"duplicateEntities\">\n      duplicate entities\n    </b-button>\n    <div>numbersEntities: {{ numbersEntities }}</div>\n  </div>\n</template>\n<script>\nimport { mapState, mapGetters } from \"vuex\";\nexport default {\n  name: \"TextDuplicateEntities\",\n  data() {\n    return {\n      payload: {\n        id: 139,\n        content: {\n          name: [\n            {\n              value: \"Bienvenue chez test\",\n            },\n          ],\n          field_domain_access: [\n            {\n              target_id: \"test328_wb_horizon_kksa\",\n            },\n          ],\n          field_domain_source: [\n            {\n              target_id: \"test328_wb_horizon_kksa\",\n            },\n          ],\n          is_default_theme: [\n            {\n              value: false,\n            },\n          ],\n        },\n      },\n    };\n  },\n\n  computed: {\n    ...mapState([\"entityDuplicate\"]),\n    ...mapGetters([\"numbersEntities\"]),\n  },\n  mounted() {\n    //\n  },\n  methods: {\n    duplicateEntities() {\n      this.$store.dispatch(\"duplicateEntities\", this.payload).then(() => {\n        this.prepareSaveEntities(this.$store.state);\n      });\n    },\n    prepareSaveEntities(state) {\n      const loopItem = (items, i, values = []) => {\n        return new Promise((resolv, reject) => {\n          if (items[i]) {\n            const item = items[i];\n            if (items[i].entities) {\n              const keys = Object.keys(items[i].entities);\n              loopFieldEntity(\n                items[i].entities,\n                keys[0],\n                items[i].entity,\n                keys,\n                0\n              ).then((entity) => {\n                this.$store\n                  .dispatch(\"saveEntity\", {\n                    entity_type_id: items[i].target_type,\n                    value: entity,\n                    index: i,\n                  })\n                  .then((resp) => {\n                    items[i].entity = resp.data.json;\n                    i = i + 1;\n                    if (i < items.length) {\n                      resolv(loopEntityPromise(items, i));\n                    } else resolv(items);\n                  })\n                  .catch((er) => {\n                    reject(er);\n                  });\n              });\n            } else {\n              this.$store\n                .dispatch(\"saveEntity\", {\n                  entity_type_id: item.target_type,\n                  value: item.entity,\n                  index: i,\n                })\n                .then((resp) => {\n                  values.push({ target_id: resp.data.id, index: i });\n                  i = i + 1;\n                  if (items.length <= i) {\n                    resolv(loopItem(items, i, values));\n                  } else {\n                    resolv(values);\n                  }\n                })\n                .catch((er) => {\n                  reject(er);\n                });\n            }\n          } else resolv(values);\n        });\n      };\n      //\n      /**\n       * On parcourt les champs.\n       * @param {Array} datas\n       * @param {String} fieldname // fieldname\n       * @return ids // les ids des entites pour le champs.\n       */\n      const loopFieldEntity = (datas, fieldname, entity, keys, i) => {\n        return new Promise((resolv) => {\n          // Si le champs contient des données,\n          // on parcourt chaqu'une des entrées.\n          if (datas[fieldname] && datas[fieldname].length > 0) {\n            // Pour chaque champs, on cree les contenus et on recupere les ids.\n            loopItem(datas[fieldname], 0).then((resp) => {\n              entity[fieldname] = resp;\n              // on passe au champs suivant.\n              i = i + 1;\n              if (keys.length > i) {\n                resolv(loopFieldEntity(datas, keys[i], entity, keys, i));\n              } else {\n                resolv(entity);\n              }\n            });\n          } else resolv(entity);\n        });\n      };\n      //\n      const loopEntityPromise = (datas, i = null) => {\n        return new Promise((resolv, reject) => {\n          if (datas[i]) {\n            // S'il contient des sous entités.\n            if (datas[i].entities) {\n              const keys = Object.keys(datas[i].entities);\n              loopFieldEntity(\n                datas[i].entities,\n                keys[0],\n                datas[i].entity,\n                keys,\n                0\n              ).then((entity) => {\n                this.$store\n                  .dispatch(\"saveEntity\", {\n                    entity_type_id: datas[i].target_type,\n                    value: entity,\n                    index: i,\n                  })\n                  .then((resp) => {\n                    datas[i].entity = resp.data.json;\n                    i = i + 1;\n                    if (i < datas.length) {\n                      resolv(loopEntityPromise(datas, i));\n                    } else resolv(datas);\n                  })\n                  .catch((er) => {\n                    reject(er);\n                  });\n              });\n            }\n            // S'il ne contient pas de sous entité.\n            else {\n              this.$store\n                .dispatch(\"saveEntity\", {\n                  entity_type_id: datas[i].target_type,\n                  value: datas[i].entity,\n                  index: i,\n                })\n                .then((resp) => {\n                  datas[i].entity = resp.data.json;\n                  i = i + 1;\n                  if (i < datas.length) {\n                    resolv(loopEntityPromise(datas, i));\n                  } else resolv(datas);\n                })\n                .catch((er) => {\n                  reject(er);\n                });\n            }\n          } else {\n            resolv([]);\n          }\n        });\n      };\n      loopEntityPromise(state.entityDuplicate, 0);\n    },\n  },\n};\n</script>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TextDuplicateEntities.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TextDuplicateEntities.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./TextDuplicateEntities.vue?vue&type=template&id=65b61741&\"\nimport script from \"./TextDuplicateEntities.vue?vue&type=script&lang=js&\"\nexport * from \"./TextDuplicateEntities.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["name","data","payload","id","content","value","field_domain_access","target_id","field_domain_source","is_default_theme","computed","mapState","mapGetters","mounted","methods","duplicateEntities","prepareSaveEntities","state","loopFieldEntity","items","keys","then","dispatch","entity_type_id","index","i","resolv","catch","reject","values","loopItem","entity","datas","loopEntityPromise"],"sourceRoot":""}