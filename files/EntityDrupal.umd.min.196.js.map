{"version":3,"file":"EntityDrupal.umd.min.196.js","mappings":"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","sources":["webpack://EntityDrupal/./src/views/TextDuplicateEntities.vue?0199","webpack://EntityDrupal/src/views/TextDuplicateEntities.vue","webpack://EntityDrupal/./src/views/TextDuplicateEntities.vue?5ad1","webpack://EntityDrupal/./src/views/TextDuplicateEntities.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('b-button',{attrs:{\"variant\":\"info\"},on:{\"click\":_vm.duplicateEntities}},[_vm._v(\" duplicate entities \")]),_c('div',[_vm._v(\"numbersEntities: \"+_vm._s(_vm.numbersEntities))])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div>\n    <b-button variant=\"info\" @click=\"duplicateEntities\">\n      duplicate entities\n    </b-button>\n    <div>numbersEntities: {{ numbersEntities }}</div>\n  </div>\n</template>\n<script>\nimport { mapState, mapGetters } from \"vuex\";\nexport default {\n  name: \"TextDuplicateEntities\",\n  data() {\n    return {\n      payload: {\n        id: 139,\n        content: {\n          name: [\n            {\n              value: \"Bienvenue chez test\",\n            },\n          ],\n          field_domain_access: [\n            {\n              target_id: \"test328_wb_horizon_kksa\",\n            },\n          ],\n          field_domain_source: [\n            {\n              target_id: \"test328_wb_horizon_kksa\",\n            },\n          ],\n          is_default_theme: [\n            {\n              value: false,\n            },\n          ],\n        },\n      },\n    };\n  },\n\n  computed: {\n    ...mapState([\"entityDuplicate\"]),\n    ...mapGetters([\"numbersEntities\"]),\n  },\n  mounted() {\n    //\n  },\n  methods: {\n    duplicateEntities() {\n      this.$store.dispatch(\"duplicateEntities\", this.payload).then(() => {\n        this.prepareSaveEntities(this.$store.state);\n      });\n    },\n    prepareSaveEntities(state) {\n      const loopItem = (items, i, values = []) => {\n        return new Promise((resolv, reject) => {\n          if (items[i]) {\n            const item = items[i];\n            if (items[i].entities) {\n              const keys = Object.keys(items[i].entities);\n              loopFieldEntity(\n                items[i].entities,\n                keys[0],\n                items[i].entity,\n                keys,\n                0\n              ).then((entity) => {\n                this.$store\n                  .dispatch(\"saveEntity\", {\n                    entity_type_id: items[i].target_type,\n                    value: entity,\n                    index: i,\n                  })\n                  .then((resp) => {\n                    items[i].entity = resp.data.json;\n                    i = i + 1;\n                    if (i < items.length) {\n                      resolv(loopEntityPromise(items, i));\n                    } else resolv(items);\n                  })\n                  .catch((er) => {\n                    reject(er);\n                  });\n              });\n            } else {\n              this.$store\n                .dispatch(\"saveEntity\", {\n                  entity_type_id: item.target_type,\n                  value: item.entity,\n                  index: i,\n                })\n                .then((resp) => {\n                  values.push({ target_id: resp.data.id, index: i });\n                  i = i + 1;\n                  if (items.length <= i) {\n                    resolv(loopItem(items, i, values));\n                  } else {\n                    resolv(values);\n                  }\n                })\n                .catch((er) => {\n                  reject(er);\n                });\n            }\n          } else resolv(values);\n        });\n      };\n      //\n      /**\n       * On parcourt les champs.\n       * @param {Array} datas\n       * @param {String} fieldname // fieldname\n       * @return ids // les ids des entites pour le champs.\n       */\n      const loopFieldEntity = (datas, fieldname, entity, keys, i) => {\n        return new Promise((resolv) => {\n          // Si le champs contient des données,\n          // on parcourt chaqu'une des entrées.\n          if (datas[fieldname] && datas[fieldname].length > 0) {\n            // Pour chaque champs, on cree les contenus et on recupere les ids.\n            loopItem(datas[fieldname], 0).then((resp) => {\n              entity[fieldname] = resp;\n              // on passe au champs suivant.\n              i = i + 1;\n              if (keys.length > i) {\n                resolv(loopFieldEntity(datas, keys[i], entity, keys, i));\n              } else {\n                resolv(entity);\n              }\n            });\n          } else resolv(entity);\n        });\n      };\n      //\n      const loopEntityPromise = (datas, i = null) => {\n        return new Promise((resolv, reject) => {\n          if (datas[i]) {\n            // S'il contient des sous entités.\n            if (datas[i].entities) {\n              const keys = Object.keys(datas[i].entities);\n              loopFieldEntity(\n                datas[i].entities,\n                keys[0],\n                datas[i].entity,\n                keys,\n                0\n              ).then((entity) => {\n                this.$store\n                  .dispatch(\"saveEntity\", {\n                    entity_type_id: datas[i].target_type,\n                    value: entity,\n                    index: i,\n                  })\n                  .then((resp) => {\n                    datas[i].entity = resp.data.json;\n                    i = i + 1;\n                    if (i < datas.length) {\n                      resolv(loopEntityPromise(datas, i));\n                    } else resolv(datas);\n                  })\n                  .catch((er) => {\n                    reject(er);\n                  });\n              });\n            }\n            // S'il ne contient pas de sous entité.\n            else {\n              this.$store\n                .dispatch(\"saveEntity\", {\n                  entity_type_id: datas[i].target_type,\n                  value: datas[i].entity,\n                  index: i,\n                })\n                .then((resp) => {\n                  datas[i].entity = resp.data.json;\n                  i = i + 1;\n                  if (i < datas.length) {\n                    resolv(loopEntityPromise(datas, i));\n                  } else resolv(datas);\n                })\n                .catch((er) => {\n                  reject(er);\n                });\n            }\n          } else {\n            resolv([]);\n          }\n        });\n      };\n      loopEntityPromise(state.entityDuplicate, 0);\n    },\n  },\n};\n</script>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-120[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TextDuplicateEntities.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-120[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TextDuplicateEntities.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./TextDuplicateEntities.vue?vue&type=template&id=65b61741&\"\nimport script from \"./TextDuplicateEntities.vue?vue&type=script&lang=js&\"\nexport * from \"./TextDuplicateEntities.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","on","duplicateEntities","_v","_s","numbersEntities","staticRenderFns","name","data","payload","id","content","value","field_domain_access","target_id","field_domain_source","is_default_theme","computed","mapState","mapGetters","mounted","methods","$store","dispatch","then","prepareSaveEntities","state","Promise","items","i","entities","loopFieldEntity","keys","entity_type_id","index","resolv","catch","reject","values","datas","fieldname","length","loopItem","entity","resp","loopEntityPromise","entityDuplicate","component"],"sourceRoot":""}